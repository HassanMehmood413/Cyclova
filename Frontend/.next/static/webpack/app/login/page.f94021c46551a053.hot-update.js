"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./app/context/AuthContext.tsx":
/*!*************************************!*\
  !*** ./app/context/AuthContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ AuthProvider,useAuth auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true); // Start with loading true\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Load auth state from localStorage on initial mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initAuth = async ()=>{\n            try {\n                const storedToken = localStorage.getItem(\"token\");\n                const storedUser = localStorage.getItem(\"user\");\n                if (storedToken) {\n                    setToken(storedToken);\n                    if (storedUser) {\n                        // Try to parse stored user data\n                        try {\n                            const userData = JSON.parse(storedUser);\n                            setUser(userData);\n                        } catch (err) {\n                            console.error(\"Failed to parse stored user data:\", err);\n                            // If parsing fails, fetch fresh data\n                            await fetchUserData(storedToken);\n                        }\n                    } else {\n                        // No stored user, fetch from API\n                        await fetchUserData(storedToken);\n                    }\n                }\n            } catch (err) {\n                console.error(\"Error initializing auth:\", err);\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        initAuth();\n    }, []);\n    const login = async (email, password)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            console.log(\"Attempting login with:\", email);\n            // Connect directly to the backend server\n            const response = await fetch(\"http://localhost:8000/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: new URLSearchParams({\n                    username: email,\n                    password\n                })\n            });\n            console.log(\"Login response status:\", response.status);\n            const responseText = await response.text();\n            console.log(\"Raw response:\", responseText.substring(0, 200)); // Log just the beginning to avoid clutter\n            // Try to parse the response as JSON\n            try {\n                const data = JSON.parse(responseText);\n                console.log(\"Login response data:\", data);\n                if (!data.access_token) {\n                    throw new Error(\"No access token found in response\");\n                }\n                const accessToken = data.access_token;\n                setToken(accessToken);\n                localStorage.setItem(\"token\", accessToken);\n                // Fetch user data with the token\n                const userData = await fetchUserData(accessToken);\n                if (userData) {\n                    // Store the user data in localStorage for persistence\n                    localStorage.setItem(\"user\", JSON.stringify(userData));\n                }\n                // Force a reload of the page to ensure all components reflect the logged in state\n                window.location.href = \"/\";\n            } catch (e) {\n                console.error(\"Failed to parse JSON response:\", e);\n                throw new Error(\"Invalid response format from server. Make sure your backend is running at http://localhost:8000\");\n            }\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"An error occurred\");\n            console.error(\"Login error:\", err);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const register = async (username, email, password)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await fetch(\"/user\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    username,\n                    email,\n                    password\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({\n                        detail: \"Registration failed\"\n                    }));\n                throw new Error(errorData.detail || \"Registration failed\");\n            }\n            // Auto login after successful registration\n            await login(email, password);\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"An error occurred\");\n            console.error(\"Registration error:\", err);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const fetchUserData = async (authToken)=>{\n        try {\n            // First try to get the user ID from the JWT token\n            const tokenParts = authToken.split(\".\");\n            if (tokenParts.length === 3) {\n                // Parse the payload part of the JWT\n                const payload = JSON.parse(atob(tokenParts[1]));\n                const userId = payload.sub;\n                if (userId) {\n                    // Fetch the user data by ID - connect directly to backend\n                    const response = await fetch(\"http://localhost:8000/user/\".concat(userId), {\n                        headers: {\n                            \"Authorization\": \"Bearer \".concat(authToken)\n                        }\n                    });\n                    if (response.ok) {\n                        const userData = await response.json();\n                        setUser(userData);\n                        return userData;\n                    }\n                }\n            }\n            // Fallback: try to fetch user list and find our user - connect directly to backend\n            const fallbackResponse = await fetch(\"http://localhost:8000/user\", {\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(authToken)\n                }\n            });\n            if (fallbackResponse.ok) {\n                const users = await fallbackResponse.json();\n                if (Array.isArray(users) && users.length > 0) {\n                    const userData = users[0]; // Just use the first user as fallback\n                    setUser(userData);\n                    return userData;\n                }\n            }\n            return null;\n        } catch (err) {\n            console.error(\"Error fetching user data:\", err);\n            return null;\n        }\n    };\n    const logout = ()=>{\n        setUser(null);\n        setToken(null);\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user\");\n        window.location.href = \"/\";\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: {\n            user,\n            token,\n            login,\n            register,\n            logout,\n            isLoading,\n            error\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"D:\\\\AI\\\\Gen_AI_Projects\\\\Hackathons\\\\Cyclova\\\\Frontend\\\\app\\\\context\\\\AuthContext.tsx\",\n        lineNumber: 209,\n        columnNumber: 5\n    }, this);\n}\n_s(AuthProvider, \"mzZbxlz3rJTcku+Jn+vbpbhpSMU=\");\n_c = AuthProvider;\nfunction useAuth() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n}\n_s1(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/context/AuthContext.tsx\n"));

/***/ })

});